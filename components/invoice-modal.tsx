"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { useInvoices } from "@/hooks/use-invoices"
import { useClients } from "@/hooks/use-clients"
import { useTasks } from "@/hooks/use-tasks"
import { useToast } from "@/hooks/use-toast"
import { formatCurrency } from "@/lib/utils"

interface InvoiceModalProps {
  isOpen: boolean
  onClose: () => void
  invoice?: any
}

export function InvoiceModal({ isOpen, onClose, invoice }: InvoiceModalProps) {
  const { addInvoice, updateInvoice } = useInvoices()
  const { clients } = useClients()
  const { tasks } = useTasks()
  const { toast } = useToast()
  const [formData, setFormData] = useState({
    clientId: "",
    dueDate: "",
    status: "draft",
    selectedTasks: [] as string[],
    invoiceNumber: "",
  })

  const [availableTasks, setAvailableTasks] = useState<any[]>([])
  const [isSubmitting, setIsSubmitting] = useState(false)

  useEffect(() => {
    if (invoice) {
      setFormData({
        clientId: invoice.client_id,
        dueDate: invoice.due_date,
        status: invoice.status,
        selectedTasks: Array.isArray(invoice.items)
          ? invoice.items.map((item: any) => item.task_id).filter(Boolean)
          : [],
        invoiceNumber: invoice.invoice_number,
      })
    } else {
      setFormData({
        clientId: "",
        dueDate: "",
        status: "draft",
        selectedTasks: [],
        invoiceNumber: "", // Will be auto-generated by database
      })
    }
  }, [invoice, isOpen])

  useEffect(() => {
    if (formData.clientId) {
      const clientTasks = tasks.filter((task) => task.client_id === formData.clientId && task.status === "completed")
      setAvailableTasks(clientTasks)
    } else {
      setAvailableTasks([])
    }
  }, [formData.clientId, tasks])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)

    try {
      if (!formData.clientId || !formData.dueDate) {
        toast({
          title: "Error",
          description: "Client and due date are required",
          variant: "destructive",
        })
        return
      }

      if (formData.selectedTasks.length === 0) {
        toast({
          title: "Error",
          description: "Please select at least one completed task",
          variant: "destructive",
        })
        return
      }

      const selectedTasksData = availableTasks.filter((task) => formData.selectedTasks.includes(task.id))

      const subtotal = selectedTasksData.reduce((sum, task) => sum + task.price, 0)
      const gst = subtotal * 0.18 // 18% GST
      const total = subtotal + gst

      const invoiceData = {
        client_id: formData.clientId,
        due_date: formData.dueDate,
        status: formData.status,
        items: selectedTasksData.map((task) => ({
          task_id: task.id,
          description: task.title,
          amount: task.price,
        })),
        subtotal,
        gst,
        total,
      }

      if (invoice) {
        await updateInvoice(invoice.id, invoiceData)
        toast({
          title: "Success",
          description: "Invoice updated successfully",
        })
      } else {
        await addInvoice(invoiceData)
        toast({
          title: "Success",
          description: "Invoice created successfully",
        })
      }

      onClose()
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to save invoice. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleTaskToggle = (taskId: string) => {
    setFormData((prev) => ({
      ...prev,
      selectedTasks: prev.selectedTasks.includes(taskId)
        ? prev.selectedTasks.filter((id) => id !== taskId)
        : [...prev.selectedTasks, taskId],
    }))
  }

  const selectedTasksData = availableTasks.filter((task) => formData.selectedTasks.includes(task.id))
  const subtotal = selectedTasksData.reduce((sum, task) => sum + task.price, 0)
  const gst = subtotal * 0.18
  const total = subtotal + gst

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="glass-card border-white/20 max-w-2xl">
        <DialogHeader>
          <DialogTitle className="gradient-text">{invoice ? "Edit Invoice" : "Create New Invoice"}</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="invoiceNumber" className="text-sm font-medium">
                Invoice Number
              </Label>
              <Input
                id="invoiceNumber"
                value={formData.invoiceNumber || "Auto-generated"}
                readOnly
                disabled
                className="glass-card border-white/20 bg-muted/50 cursor-not-allowed"
                placeholder="Auto-generated"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="client" className="text-sm font-medium">
                Client *
              </Label>
              <Select
                value={formData.clientId}
                onValueChange={(value) => setFormData((prev) => ({ ...prev, clientId: value }))}
              >
                <SelectTrigger className="glass-card border-white/20">
                  <SelectValue placeholder="Select client" />
                </SelectTrigger>
                <SelectContent>
                  {clients.map((client) => (
                    <SelectItem key={client.id} value={client.id}>
                      {client.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="dueDate" className="text-sm font-medium">
                Due Date *
              </Label>
              <Input
                id="dueDate"
                type="date"
                value={formData.dueDate}
                onChange={(e) => setFormData((prev) => ({ ...prev, dueDate: e.target.value }))}
                className="glass-card border-white/20"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="status" className="text-sm font-medium">
                Status
              </Label>
              <Select
                value={formData.status}
                onValueChange={(value) => setFormData((prev) => ({ ...prev, status: value }))}
              >
                <SelectTrigger className="glass-card border-white/20">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="draft">Draft</SelectItem>
                  <SelectItem value="sent">Sent</SelectItem>
                  <SelectItem value="paid">Paid</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          {availableTasks.length > 0 && (
            <div className="space-y-2">
              <Label className="text-sm font-medium">Select Completed Tasks</Label>
              <div className="space-y-2 max-h-40 overflow-y-auto border rounded-lg p-3 glass-card border-white/20">
                {availableTasks.map((task) => (
                  <div key={task.id} className="flex items-center space-x-2">
                    <Checkbox
                      id={task.id}
                      checked={formData.selectedTasks.includes(task.id)}
                      onCheckedChange={() => handleTaskToggle(task.id)}
                    />
                    <label htmlFor={task.id} className="flex-1 text-sm cursor-pointer">
                      {task.title} - {formatCurrency(task.price)}
                    </label>
                  </div>
                ))}
              </div>
            </div>
          )}

          {formData.clientId && availableTasks.length === 0 && (
            <div className="text-center py-4 text-muted-foreground">
              <p>No completed tasks found for this client.</p>
              <p className="text-sm">Complete some tasks first to create an invoice.</p>
            </div>
          )}

          {selectedTasksData.length > 0 && (
            <div className="glass-card p-4 border-white/20 rounded-lg">
              <h3 className="font-semibold mb-3">Invoice Summary</h3>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>Subtotal:</span>
                  <span>{formatCurrency(subtotal)}</span>
                </div>
                <div className="flex justify-between">
                  <span>GST (18%):</span>
                  <span>{formatCurrency(gst)}</span>
                </div>
                <div className="flex justify-between font-bold text-lg border-t pt-2">
                  <span>Total:</span>
                  <span>{formatCurrency(total)}</span>
                </div>
              </div>
            </div>
          )}

          <div className="flex space-x-3 pt-4">
            <Button type="button" variant="outline" onClick={onClose} className="flex-1 bg-transparent">
              Cancel
            </Button>
            <Button
              type="submit"
              className="flex-1 bg-gradient-to-r from-orange-500 to-red-500 text-white"
              disabled={selectedTasksData.length === 0 || isSubmitting}
            >
              {isSubmitting ? "Saving..." : invoice ? "Update" : "Create"} Invoice
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  )
}
